1. What is the difference between a Programming Language and a Scripting Language?
Ans. 
Programming Languages:
 i) A programming language is a formal language that is used to write instructions that can be executed by a computer.
 ii) Source code is compiled into machine code before execution.
 iii) Typically have a stricter, static type system.
 iv) Tend to have more complex control structures, like loops and conditionals.
 v) Tend to have more complex control structures, like loops and conditionals.
 vi) Often used for developing large, complex applications.
 vii) Examples: C++, Java, Python, Ruby, Swift.

 Scripting Language:
 i) A scripting language is a type of programming language that is used to write scripts, which are sets of instructions that are executed by an interpreter rather than being compiled into an executable program.
 ii) Code is interpreted at runtime without a separate compilation step.
 iii) Usually have a more flexible, dynamic type of system.
 iv) Usually have simpler control structures that are optimized for ease of use.
 v) Typically slower, as they are interpreted at runtime.
 vi) Typically used for smaller, simpler tasks or automating system tasks.
 vii) Examples: Bash, JavaScript, PHP, Perl,

 2. What is an algorithm? Can you give an example of a simple algorithm?
 Ans. An algorithm is a set of well-defined steps or instructions that can be followed to solve a problem or accomplish a task. Algorithms are an essential part of computer science and are used in a wide range of applications, including data processing, machine learning, and artificial intelligence.
 An algorithm should have the following properties:

i) Input: An algorithm should take one or more inputs as input.
ii) Output: An algorithm should produce one or more outputs as a result of the input.
iii) Definiteness: An algorithm should have a clear and precise set of steps that can be followed in a specific order.
iv) Finiteness: An algorithm should have a finite number of steps and should terminate after a certain point.
v) Effectiveness: An algorithm should be able to solve a problem or accomplish a task in a reasonable amount of time.

Here is an example of a simple algorithm for finding the maximum value in a list of numbers:

Set a variable called "max" to the first number in the list.
For each number in the list, starting with the second number:
If the current number is greater than "max", set "max" to the current number.
Return "max" as the output.
This algorithm takes a list of numbers as input and returns the maximum value in the list as output. It follows a clear and precise set of steps and terminates after a finite number of iterations. It is also effective, as it can find the maximum value in the list in a reasonable amount of time.

3. What is a data type and how is it used in programming?
Ans. In programming, a data type is a classification of data that defines the type of value that a variable can hold. Different programming languages have different data types, and the choice of data type affects how the data is stored, processed, and manipulated by the program.
Some common data types include:

i) Integer: An integer is a whole number without a decimal point. It can be positive, negative, or zero.
ii) Floating point: A floating point number is a number with a decimal point. It can be positive, negative, or zero.
iii) Boolean: A boolean value is a binary value that can be either true or false.
iv) String: A string is a sequence of characters, such as a word or phrase.
v) Array: An array is a data type that stores a collection of values of the same data type.
vi) Struct: A struct is a data type that consists of a collection of related values.
vii) Enum: An enum is a data type that defines a set of related values.

Data types are used to ensure that a program uses data in a consistent and predictable way. They also help to prevent errors and ensure that the program is efficient and optimized for the specific needs of the application.

4. What is a programming paradigm and can you name some examples?
